generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AbilityType {
  FIRE
  ICE
  EARTH
  WATER
  ELECTRIC
  SOLAR
  LUNAR
  SHADOW
  MYSTIC
  NATURE
  ASTRAL
  TOXIC
  METALLIC
  SPECTRAL
  CHAOS
  CRISPIES
  // Add more types as needed
}

enum AbilityCategory {
  ATTACK
  DEFENSE
  UTILITY
  // Categories to describe what the ability does
}

enum EffectType {
  DAMAGE
  HEALING
  PROTECTION
  BUFF
  DEBUFF
  // More effect types as required
}

model Monster {
  id            String         @id @default(uuid())
  capturedAt    DateTime       @default(now())
  type          String
  species       String
  rarity        String
  name          String
  status        String
  url           String
  hp            Int
  ap            Int
  menageries    Menagerie[]     // Monsters are associated with the menagerie
  shop          Shop[]
  abilities     Ability[]       // Monster abilities
}

// Ability model
model Ability {
  id              Int        @id @default(autoincrement())
  name            String
  type            String      // e.g., "Pyro", "Hydro", etc., or use an Enum for stricter control
  cost            Int         // Mana or energy cost to use the ability
  damage          Int?        // Base damage of the ability, optional for non-damaging abilities
  description     String      // Description of the ability's effect or flavor text
  category        String      // "Attack", "Defense", "Utility", etc., or use an Enum

  // Prefixed effect-related fields
  effectType      String?     // Type of effect: "Damage", "Healing", "Protection", etc.
  effectTurns     Int?        // Duration of the effect in turns
  effectChance    Int?        // Chance for the effect to apply (0-100%)
  effectDamage    Int?        // Optional, used if the effect deals damage
  effectReduction Int?        // Optional, for effects that reduce damage or stats
  effectHeal      Int?        // Optional, for effects that heal the target
  effectIncrease  Int?        // Optional, for buffs that increase stats or effects

  monsters        Monster[]   // Abilities can be associated with multiple monsters
}

model Account {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          String         @default("BASIC_USER")
  createdAt     DateTime       @default(now())
  currency      Int            @default(100000)
  inventory     Inventory[]    // Relation to inventory model
  menagerie     Menagerie[]    // Relation to the new menagerie model
  shopItems     Shop[]
}

model Inventory {
  id            Int            @id @default(autoincrement())
  user          Account        @relation(fields: [userId], references: [id])
  userId        Int
  // Removed the relation to monster since monsters will only go into the menagerie.
  // You can add more fields to the inventory model as needed, such as item type, quantity, or description.
}

model Menagerie {
  id            Int            @id @default(autoincrement())
  user          Account        @relation(fields: [userId], references: [id])
  userId        Int
  monster       Monster        @relation(fields: [monsterId], references: [id])
  monsterId     String
  // Additional fields for menagerie management can be added here
}

model Shop {
  id            String         @id @default(uuid())
  monsterId     String
  playerId      Int

  price         Int
  monster       Monster        @relation(fields: [monsterId], references: [id])
  player        Account        @relation(fields: [playerId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
