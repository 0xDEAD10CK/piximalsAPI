generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Monster {
  id            String         @id @default(uuid())
  capturedAt    DateTime       @default(now())
  type          String
  species       String
  rarity        String
  name          String
  status        String
  url           String
  hp            Int
  ap            Int
  menageries    Menagerie[]     // Monsters are associated with the menagerie
  shop          Shop[]
  zone          Zone[]          // Monsters can spawn in multiple zones
}

model Account {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          String         @default("BASIC_USER")
  createdAt     DateTime       @default(now())
  currency      Int            @default(100000)
  inventory     Inventory[]    // Relation to inventory model
  menagerie     Menagerie[]    // Relation to the new menagerie model
  shopItems     Shop[]
  locationId    Int           
  location      Location       @relation(fields: [locationId], references: [id])
  zoneId        String?
  zone          Zone?           @relation(fields: [zoneId], references: [id])// Relation to the zone model
}

model Inventory {
  id            Int            @id @default(autoincrement())
  user          Account        @relation(fields: [userId], references: [id])
  userId        Int
  // Removed the relation to monster since monsters will only go into the menagerie.
  // You can add more fields to the inventory model as needed, such as item type, quantity, or description.
}

model Menagerie {
  id            Int            @id @default(autoincrement())
  user          Account        @relation(fields: [userId], references: [id])
  userId        Int
  monster       Monster        @relation(fields: [monsterId], references: [id])
  monsterId     String
  // Additional fields for menagerie management can be added here
}

model Shop {
  id            String         @id @default(uuid())
  monsterId     String
  playerId      Int

  price         Int
  monster       Monster        @relation(fields: [monsterId], references: [id])
  player        Account        @relation(fields: [playerId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Zone {
  id            String         @id @default(uuid())
  zonename      String    
  monsters      Monster[]      // One-to-many relationship with Monster
  players       Account[]     // One-to-many relationship with Account
  type          String       // Type of zone, e.g. forest, desert, etc. inherited from the location model
  description   String
}

model Location {
  id            Int         @id @default(autoincrement())
  name          String
  playerId      Int[] //multiple players can be at a location
  zoneId        String[]
  players       Account[]      // One-to-many relationship with Account
  type          String
}
