generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model monster {
  id            String         @id @default(uuid())
  capturedAt    DateTime       @default(now())
  type          String
  species       String
  rarity        String
  name          String
  status        String
  url           String
  hp            Int
  ap            Int
  menageries    menagerie[]     // Monsters are associated with the menagerie
  shop          shop[]
}

model account {
  id            Int            @id @default(autoincrement())
  username      String         @unique
  password      String
  role          String         @default("BASIC_USER")
  createdAt     DateTime       @default(now())
  currency      Int            @default(100000)
  inventory     inventory[]    // Relation to inventory model
  menagerie     menagerie[]    // Relation to the new menagerie model
  shopItems     shop[]
}

model inventory {
  id            Int            @id @default(autoincrement())
  user          account        @relation(fields: [userId], references: [id])
  userId        Int
  // Removed the relation to monster since monsters will only go into the menagerie.
  // You can add more fields to the inventory model as needed, such as item type, quantity, or description.
}

model menagerie {
  id            Int            @id @default(autoincrement())
  user          account        @relation(fields: [userId], references: [id])
  userId        Int
  monster       monster        @relation(fields: [monsterId], references: [id])
  monsterId     String
  // Additional fields for menagerie management can be added here
}

model shop {
  id            String         @id @default(uuid())
  monsterId     String
  playerId      Int

  price         Int
  monster       monster        @relation(fields: [monsterId], references: [id])
  player        account        @relation(fields: [playerId], references: [id])

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
